#!/bin/bash
# The following script automates the LXC creation process for Arch as
# described here: https://wiki.archlinux.org/index.php/Linux_Containers

if [ -z $1 ]; then
  echo "Usage: $0 [container-name]"
  exit
elif [ -z $_LXC_USER ]; then
  echo "Environment variable \$_LXC_USER not set."; vars=true
  echo "  This variable is used to create the initial non-root (but with sudo powers)"
  echo "  user inside of the container."
  exit
fi

# Install necessary things if necessary:
! which brctl &>/dev/null                     && pacman -S bidge-utils
! (pacman -Ss haveged | grep "\[installed\]") && pacman -S haveged
# TODO: don't run these every time?:
systemctl enable haveged
systemctl start haveged

name=$1

cd /var/lib/lxc/

if [[ "$2" != "-l" ]] && [ -d /var/lib/lxc/$name ]; then
  echo "Container '$name' already exists - skipping straight to initialization."
  cd $name
else
  # Create rootfs and copy arch2 configuration file
  lxc-create -n $name -t /usr/share/lxc/templates/lxc-archlinux
  cd $name

  # Default config:
  #cat ../config | sed "s/arch2/$name/g" > config 
  # TODO: IP of container?? (101 should change?)
  echo "Creating config file..."
  cat <<- EOF > ./config
# Template used to create this container: /usr/share/lxc/templates/lxc-archlinux
# Parameters passed to the template:
# For additional config options, please look at lxc.container.conf(5)
lxc.rootfs = /var/lib/lxc/$name/rootfs
lxc.utsname = $name
lxc.arch = x86_64
lxc.include = /usr/share/lxc/config/archlinux.common.conf

lxc.network.type = veth
lxc.network.link = br0 
lxc.network.flags = up

# DHCP with wired NIC:
#lxc.network.ipv4 = 0.0.0.0

###################################################################
#### NAT Bridge (should work with both wired and wireless):
# CIDR block of br0:
lxc.network.ipv4 = 192.168.63.104/24
# Address of kudu (br0):
lxc.network.ipv4.gateway = 192.168.63.100
###################################################################

# Name of device inside LXC:
lxc.network.name = eth0

## systemd within the lxc
lxc.autodev = 1 
lxc.pts = 1024
lxc.kmsg = 0 
lxc.hook.autodev=/var/lib/lxc/$name/autodev

## Shared mount points:
lxc.mount.entry = /var/cache/pacman/pkg var/cache/pacman/pkg none bind 0 0 

## for openvpn to connect through tufts vpn
lxc.cgroup.devices.allow = c 10:200 rwm
EOF

  # Systemd considerations:
  echo "Creating autodev file..."
  cat <<- 'EOF' > ./autodev
#!/bin/bash
cd ${LXC_ROOTFS_MOUNT}/dev
mkdir net
mknod net/tun c 10 200
chmod 0666 net/tun
EOF
  echo "Making autodev file executable..."
  chmod 755 ./autodev

  # Systemd conflicts in the /dev tree (disable udev and mounting of binfmt_misc):
  chroot rootfs /bin/bash -x <<'EOF'
    ln -s /dev/null /etc/systemd/system/systemd-udevd.service
    ln -s /dev/null /etc/systemd/system/systemd-udevd-control.socket
    ln -s /dev/null /etc/systemd/system/systemd-udevd-kernel.socket
    ln -s /dev/null /etc/systemd/system/proc-sys-fs-binfmt_misc.automount
    exit
EOF
fi

echo "Initializing container '$name' environment..."
sleep 0.25

if ! [ -z "$(lxc-info -n $name | grep RUNNING)" ]; then
  echo "Container already running - stopping first."
  lxc-stop   -n $name
fi

#cat `which _lxc-init` | sed "s/\$_LXC_USER/$_LXC_USER/g" > rootfs/_lxc-init # pay no attention...
file=`which _lxc-init`
if [ -z "$file" ]; then
  echo "Could not find '_lxc-init' in your path. QUITTING."
  exit 1
fi

mkdir -p rootfs/
cp $file rootfs/
chmod 755 rootfs/_lxc-init

[ ! -e rootfs/.secret ] && cp $HOME/.secret rootfs/root/

# Ignore bug when starting lxc:
#lxc-start  -n $name 2>&1 | grep -v "lxc-start: utils.c: setproctitle: 1461 Invalid argument - setting cmdline failed"

# TODO: --clear-env but with $_LXC_USER?
#lxcrun="lxc-attach -n $name -- "
#lxcrun() { lxc-attach --clear-env -n $name -- /usr/bin/su - -c "$1"; }
#lxcrun /_lxc-init
echo "Running initialization script inside container..."
arch-lxc $name /_lxc-init
echo "Stopping container..."
lxc-stop   -n $name
echo "Cleaning up init script..."
rm -f rootfs/_lxc-init

